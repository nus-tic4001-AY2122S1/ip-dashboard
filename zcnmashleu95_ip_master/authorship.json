[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"## Set Up","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"To compile the java files:","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"`javac -d bin_folder src\\main\\java\\*.java src\\main\\java\\commands\\*.java src\\main\\java\\exceptions\\*.java src\\main\\java\\parser\\*.java src\\main\\java\\storage\\*.java src\\main\\java\\tasks\\*.java src\\main\\java\\ui\\*.java` ","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"To run the file:","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"`java -classpath bin_folder Duke`","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":24,"zcnmashleu95":9}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"# User Guide for Duke","lastModifiedDate":"2021-09-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"## Introduction","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":" Duke is a Personal Assistant Chatbot that helps the user keep track of various tasks. These tasks include ToDos, Deadlines and events.","lastModifiedDate":"2021-09-26"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":" The user would be able to input various commands in order execute the different features. If the commands are incorrect, an error message would be displayed.","lastModifiedDate":"2021-09-26"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":" ","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"The main features would be commands related to the tasks. For the specialised tasks, ToDo has only a description.","lastModifiedDate":"2021-09-26"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"Deadlines consist of a description and a due date. Events consist of a description of task and a time period. Features such as save and load happen automatically upon opening or closing the application.","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"If the folder (\"\\data\") and file (\"tasks_list.txt\") were not created, the application will create them.","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"List of Features:","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"* Add tasks such as (ToDo, Deadlines, Events) to the task list","lastModifiedDate":"2021-09-26"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"* Reschedule tasks\u0027 timings","lastModifiedDate":"2021-09-26"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"* Display the current list of tasks","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"* Set the tasks to be done or undone","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"* Display errors when commands are incorrect","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"* Delete tasks from the task list","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"* Store the tasks in a text file","lastModifiedDate":"2021-09-26"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"* Load tasks from a text file","lastModifiedDate":"2021-09-26"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"* Find tasks that contain a keyword (fully or partially)","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2021-09-26"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"The user will input commands for the chatbot to parse in order to execute different features. ","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"Different commands may require different inputs. The user could also input \"/help\" for further help.","lastModifiedDate":"2021-09-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"###Inputs in commands:","lastModifiedDate":"2021-09-26"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"The input description will be in the square brackets \"[ ]\".","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"eg. [Time] refers to an input that is related to time.","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"1. `[description]` is a string that describes the task.","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"2. `[Date and Time]` refers to the input date and time. It goes by the format \"dd/MM/yyyy HH:mm:ss\". Eg. 02/12/20 10:10:10","lastModifiedDate":"2021-09-26"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"3. `[Time]` refers to the Time format of \"HH:mm:ss\" where they represent the hours, minutes and seconds.","lastModifiedDate":"2021-09-26"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"4. `[option]` refers to the option number. The option number for each task can be viewed when the tasks are printed","lastModifiedDate":"2021-09-26"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":" as a list.(this can be seen by the command `list`)","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"5. `[keyword]` refers to the phrase or word that you want to search for.","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"###Commands:","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"The commands for the respective features are after the semi-colon\":\"","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"1. Adding a generic task: `[description]`","lastModifiedDate":"2021-09-26"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"2. Adding a ToDo task: `todo [description]`","lastModifiedDate":"2021-09-26"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"3. Adding a Deadline task: `deadline [description] /by [Date and Time]`","lastModifiedDate":"2021-09-26"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"4. Adding an Event task: `event [description] /at [Date and Time] to [Time]`","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"5. Reschedule a Deadline: `reschedule [option number] /new [Date and time]`","lastModifiedDate":"2021-09-26"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"6. Reschedule an Event: `reschedule [option number] /new [Date and time] to [Time]`","lastModifiedDate":"2021-09-26"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"7. Changing a task to done: `done [option number]`","lastModifiedDate":"2021-09-26"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"8. Changing a task to undone: `undone [option number]`","lastModifiedDate":"2021-09-26"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"9. Deleting a task from the list: `delete [option number]`","lastModifiedDate":"2021-09-26"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"10. Clearing the task list: `/clear`","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"11. To close this application: `bye`","lastModifiedDate":"2021-09-26"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"12. To find tasks in the list containing a keyword: `find [keyword]`","lastModifiedDate":"2021-09-26"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"13. To print the list of tasks: `list`","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"14. To print the list of commands available: `/help`","lastModifiedDate":"2021-09-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":8,"zcnmashleu95":49}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"import commands.Command;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import parser.Parser;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"//TODO: CLEAN UP!","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"//TODO: Exceptions - Probably could double check more,","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"// Work on Individual Features more","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"// Double check on assertions","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"// Individual Features:","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"//Better Search - e.g., find items even if the keyword matches the item only partially.","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"// Snooze - Provide a way to easily snooze/postpone/reschedule tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"// \u0027Do within a period\u0027 task - Provide support for managing tasks that need to be done within a certain period e.g., collect certificate between Jan 15 and 25th.","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"    private Ui ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"    private Parser parser;","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"     * Used to create a new Duke Instance. Initialise the ui,storage and tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"     * tasks will load from the storage. If there is an error, it will initialise on its own.","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"     * @param filePath The String filePath to storage","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"     * @throws IOException","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"    public Duke(String filePath) throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"     * Used to keep the Duke Chat bot running. Scan for input then Parse the input into a command","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"     * Afterwards, execute the command. The process will keep running until the user types \"bye\"","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"     * @throws IOException","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"    public void run() throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"        Command c;","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"        String input;","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"        ui.printIntro();","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"        while (isRunning) {","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"zcnmashleu95"},"content":"            try {","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"zcnmashleu95"},"content":"                input \u003d ui.scanForInput();","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"zcnmashleu95"},"content":"                ui.showLine();","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"zcnmashleu95"},"content":"                c \u003d parser.parse(input);","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"zcnmashleu95"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-09-19"},{"lineNumber":69,"author":{"gitId":"zcnmashleu95"},"content":"                isRunning \u003d c.isRunning();","lastModifiedDate":"2021-09-19"},{"lineNumber":70,"author":{"gitId":"zcnmashleu95"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":71,"author":{"gitId":"zcnmashleu95"},"content":"                ui.showError(e.getErrorMessage());","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"zcnmashleu95"},"content":"            } finally {","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"zcnmashleu95"},"content":"                ui.showLine();","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":76,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":77,"author":{"gitId":"zcnmashleu95"},"content":"        ui.printBye();","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":80,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":81,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":82,"author":{"gitId":"zcnmashleu95"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":83,"author":{"gitId":"zcnmashleu95"},"content":"        new Duke(\"data/tasks_list.txt\").run();","lastModifiedDate":"2021-09-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"-":4,"zcnmashleu95":81}},{"path":"src/main/java/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.*;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":" * This represents the AddCommand class which adds a specific task to the task list.","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"    String taskType;","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"    String taskDescription;","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"    String taskSecondPart;","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"     * This is a constructor for the AddCommand","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"     * @param type        This indicates the type or subclass of Task","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"     * @param description This describes the activity of the Task","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"     * @param secPart     This is mainly for deadlines or events whereby they have a /by or /at. The Date and Time.","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"    public AddCommand(String type, String description, String secPart) {","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"        this.taskType \u003d type;","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"        this.taskDescription \u003d description;","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"        this.taskSecondPart \u003d secPart;","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"     * This executes the AddCommand. It will add the Task to the TaskList by calling the","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"     * addToList method.","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"     * @param tasks   This is the Task List that contains the list of tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"     * @param ui      This is the ui, to be used for scanning and printing","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"     * @param storage This is the storage, used to read and write over the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"     * @throws DukeException When the taskType is not a Task or its subclasses.","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.addTask(taskType, taskDescription, taskSecondPart);","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"        int size \u003d tasks.getSize();","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"        ui.printMessage(System.lineSeparator() + \"Got it. I\u0027ve added this task:\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"                System.lineSeparator() + tasks.get(size - 1).toString());","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.printNumberOfTasks();","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Adding a generic task: [description]\");","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Adding a ToDo task: todo [description]\");","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Adding a Deadline task: deadline [description] /by [Date and Time]\");","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Adding an Event task: event [description] /at [Date and Time] to [Time]\");","lastModifiedDate":"2021-09-26"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"        return this.taskType;","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"        return this.taskDescription;","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"zcnmashleu95"},"content":"    public String getTaskSecondPart() {","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"zcnmashleu95"},"content":"        return this.taskSecondPart;","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":68}},{"path":"src/main/java/commands/ChangeDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.*;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":" * This represents the change done command. It is used to change the task from the task list to its","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":" * done \"state\".","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"public class ChangeDoneCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    private int option \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"    private boolean isDone;","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor of the ChangeDoneCommand.","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"     * @param option indicates the Task option that the user wants to change","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"    public ChangeDoneCommand(int option, boolean isDone) {","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"        this.option \u003d option;","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"     * This executes the DoneCommand.","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"     * @param tasks   This is the Task List that contains the list of tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"     * @param ui      This is the ui, to be used for scanning and printing","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"     * @param storage This is the storage, used to read and write over the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"     * @throws DukeException when option is not within the range of 1 and TaskList Size","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"            String doneLevel;","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"            tasks.get(option - 1).changeDoneTo(isDone);","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"            if (isDone) {","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"                doneLevel \u003d \" done:\";","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"            } else {","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"                doneLevel \u003d \" not done:\";","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"            ui.printMessage(System.lineSeparator() + \"Nice! I\u0027ve marked this task as\" + doneLevel +","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"                    System.lineSeparator() + tasks.get(option - 1).toString());","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"            throw new DukeException(\"Input option for ChangeDone Command invalid\");","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"        return;","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Changing a task to done: done [option number]\");","lastModifiedDate":"2021-09-26"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Changing a task to undone: undone [option number]\");","lastModifiedDate":"2021-09-26"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":61}},{"path":"src/main/java/commands/ClearListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"public class ClearListCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"    public ClearListCommand() {","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"        ui.printMessage(\"Clearing all tasks in the tasklist.\");","lastModifiedDate":"2021-09-26"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.clearAllTasks();","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.printList();","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Clearing the task list: /clear\");","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":24}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.*;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":" * This is the abstract parent Command Class.","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    protected static boolean running \u003d true;","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the abstract method for execute.","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"     * @param tasks   This is the Task List that contains the list of tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"     * @param ui      This is the ui, to be used for scanning and printing","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"     * @param storage This is the storage, used to read and write over the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException;","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"     * This method is an accessor. It returns the boolean value of running.","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"     * @return running This indicates if Duke is to continue to run or not","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"    public boolean isRunning() {","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"        return this.running;","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":35}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.*;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":" * This represents the command to delete a specific task from the task list.","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"    int option \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor for the DeleteCommand.","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"     * @param option This indicates the Task that the user wants to delete","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"    public DeleteCommand(int option) {","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"        this.option \u003d option;","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"     * This executes the DeleteCommand. It will call the deleteTask method.","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"     * @param tasks   This is the Task List that contains the list of tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"     * @param ui      This is the ui, to be used for scanning and printing","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"     * @param storage This is the storage, used to read and write over the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"     * @throws","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"            tasks.deleteTask(option - 1);","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"            throw new DukeException(\"Input option for Delete Command invalid.\");","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.printList();","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Deleting a task from the list: delete [option number]\");","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":44}},{"path":"src/main/java/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.*;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":" * This represents the exit command. It is used to change the running boolean to false.","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":" * Afterwards, during execution, it will write the tasks into the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor for ExitCommand. It will change the running boolean to false.","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"        this.running \u003d false;","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the execution of the ExitCommand. It will write the tasks from the TaskList","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"     * to the storage.","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"     * @param tasks   This is the Task List that contains the list of tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"     * @param ui      This is the ui, to be used for scanning and printing","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"     * @param storage This is the storage, used to read and write over the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"        assert (!running) : \"running should not be true at this stage. It should be false\";","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"        ui.printMessage(\"Executing Exit Command: Saving Task List to storage\");","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"        storage.save(tasks);","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"        ui.printMessage(\"Finished saving Task List to storage\");","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"To close this application: bye\");","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":42}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":" * This is to represent the FindCommand. It is used to find the tasks","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":" * that contains a specific keyword","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"    String keyword;","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor for the FindCommand.","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"     * @param keyword This keyword is to be used for the searching afterwards during execution","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"     * This executes the FindCommand. It will call the findList method with the keyword.","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"     * @param tasks   This is the Task List that contains the list of tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"     * @param ui      This is the ui, to be used for scanning and printing","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"     * @param storage This is the storage, used to read and write over the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.findList(keyword);","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"To find tasks in the list containing a keyword: find [keyword]\");","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":41}},{"path":"src/main/java/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"    public HelpCommand() {","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"        ui.printMessage(\"Inputs in commands (Input is described within the square brackets):\\n\" +","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"                \"[description] is a string that describes the task.\\n\" +","lastModifiedDate":"2021-09-26"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"                \"[Date and Time] refers to the input date. It goes by the format \\\"dd/MM/yyyy HH:mm:ss\\\". \" +","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"                \"Eg. 02/12/20 10:10:10\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"                \"[Time] refers to the Time format of \\\"HH:mm:ss\\\" where they represent the hours, minutes and seconds\\n\" +","lastModifiedDate":"2021-09-26"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"                \"[option] refers to the option number. The option number for each task can be viewed when the tasks are printed\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"                \" as a list.(this can be seen by the command \\\"list\\\")\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"                \"[keyword] refers to the phrase or word that you want to search for\\n\" +","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"                \"\\n\" +","lastModifiedDate":"2021-09-26"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"                \"The commands for the respective features are after the semi-colon\\\":\\\"\\n\");","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"        AddCommand.printHelp();","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"        RescheduleCommand.printHelp();","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"        ChangeDoneCommand.printHelp();","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"        DeleteCommand.printHelp();","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"        ClearListCommand.printHelp();","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"        ExitCommand.printHelp();","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"        FindCommand.printHelp();","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"        ListCommand.printHelp();","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":39}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.*;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":" * This represents the list command. It is meant for printing out a list","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":" * of tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor for the ListCommand.","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"    public ListCommand() {","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"     * This executes the ListCommand. It will call the printList method from the TaskList class.","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"     * @param tasks   This is the list of Tasks","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"     * @param ui      This is the ui, to be used for scanning and printing","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"     * @param storage This is the storage, used to read and write over the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.printList();","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"To print the list of tasks: list\");","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":35}},{"path":"src/main/java/commands/RescheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package commands;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.Event;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.Deadline;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"public class RescheduleCommand extends Command {","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    String newDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"    int option \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"    public RescheduleCommand(int option, String newDateTime) {","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"        this.newDateTime \u003d newDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"        this.option \u003d option;","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"    @Override","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"            if (tasks.get(this.option - 1) instanceof Deadline) {","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"                ((Deadline) (tasks.get(this.option - 1))).rescheduleBy(this.newDateTime);","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"                ui.printMessage(\"Rescheduled Date time: \" + tasks.get(this.option - 1).toString());","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"            } else if (tasks.get(this.option - 1) instanceof Event) {","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"                ((Event) (tasks.get(this.option - 1))).rescheduleAt(this.newDateTime);","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"                ui.printMessage(\"Rescheduled Date time: \" + tasks.get(this.option - 1).toString());","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"            } else {","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"                throw new DukeException(\"Error: You did not reschedule on a Deadline or Event\");","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"            throw new DukeException(\"Error: Input option for Reschedule command is invalid\");","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"    public static void printHelp() {","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Reschedule a Deadline: reschedule [option number] /new [Date and time]\");","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Reschedule an Event: reschedule [option number] /new [Date and time] to [Time]\");","lastModifiedDate":"2021-09-26"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":47}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package exceptions;","lastModifiedDate":"2021-09-15"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-15"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":" * This represents the DukeException, meant for exceptions that run in Duke.","lastModifiedDate":"2021-09-15"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":" * It will return the error message to the ui for it to be printed.","lastModifiedDate":"2021-09-15"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-15"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2021-09-15"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"    String errorMessage;","lastModifiedDate":"2021-09-15"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor for DukeException","lastModifiedDate":"2021-09-15"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-15"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"     * @param errorMessage This is the error message for the specific exception when caught.","lastModifiedDate":"2021-09-15"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2021-09-15"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2021-09-15"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-15"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"     * This is an accessor for the error message of the exception","lastModifiedDate":"2021-09-15"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-15"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"    public String getErrorMessage() {","lastModifiedDate":"2021-09-15"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"        return this.errorMessage;","lastModifiedDate":"2021-09-15"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-15"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-15"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-15"}],"authorContributionMap":{"zcnmashleu95":28}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package parser;//deals with making sense of the user command","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import commands.*;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":" * This represents the parser. It parses the input from the ui. Depending on the input,","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":" * it will parse the respective command","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"public class Parser {","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"     * Constructor for Parser","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"    public Parser() {","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"     * This parses the input gotten from the ui. This method will parse and return the appropriate Command.","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"     * @param input","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"     * @return Command","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"     * @throws DukeException When the input for option number in various Commands is not a number or when the input","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"     *                       for Adding a new Task is incomplete.","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"        String description \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"        String secPart \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"        String keyword;","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"        int option \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"        int index \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"        String commandWord \u003d input.stripLeading().split(\" \")[0];","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"        assert !(commandWord.equals(null)) : \"commandWord should not be null\";","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"        if (input.strip().equals(\"\")) {","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"            throw new DukeException(\"☹ OOPS!!! You did not enter any command\");","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"            case \"bye\":","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"                return new ExitCommand();","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"            case \"blah\":","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"            case \"list\":","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"                return new ListCommand();","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"            case \"/clear\":","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"                return new ClearListCommand();","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"            case \"/help\":","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"                return new HelpCommand();","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"            case \"find\":","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"                keyword \u003d input.replaceFirst(\"find\", \"\").trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"                return new FindCommand(keyword);","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"zcnmashleu95"},"content":"            case \"done\":","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"zcnmashleu95"},"content":"                try {","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"zcnmashleu95"},"content":"                    option \u003d Integer.parseInt(input.replaceFirst(\"done\", \"\").trim());","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"zcnmashleu95"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"zcnmashleu95"},"content":"                    throw new DukeException(\"Error: Invalid option number, your input is not a number\");","lastModifiedDate":"2021-09-19"},{"lineNumber":69,"author":{"gitId":"zcnmashleu95"},"content":"                }","lastModifiedDate":"2021-09-19"},{"lineNumber":70,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":71,"author":{"gitId":"zcnmashleu95"},"content":"                return new ChangeDoneCommand(option, true);","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"zcnmashleu95"},"content":"            case \"undone\":","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"zcnmashleu95"},"content":"                try {","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"zcnmashleu95"},"content":"                    option \u003d Integer.parseInt(input.replaceFirst(\"undone\", \"\").trim());","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"zcnmashleu95"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"zcnmashleu95"},"content":"                    throw new DukeException(\"Error: Invalid option number, your input is not a number\");","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"zcnmashleu95"},"content":"                }","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"zcnmashleu95"},"content":"                return new ChangeDoneCommand(option, false);","lastModifiedDate":"2021-09-19"},{"lineNumber":81,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":82,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":83,"author":{"gitId":"zcnmashleu95"},"content":"            case \"delete\":","lastModifiedDate":"2021-09-19"},{"lineNumber":84,"author":{"gitId":"zcnmashleu95"},"content":"                try {","lastModifiedDate":"2021-09-19"},{"lineNumber":85,"author":{"gitId":"zcnmashleu95"},"content":"                    option \u003d Integer.parseInt(input.replace(\"delete\", \"\").trim());","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"zcnmashleu95"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"zcnmashleu95"},"content":"                    throw new DukeException(\"Error: Invalid option number, your input is not a number\");","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"zcnmashleu95"},"content":"                }","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"zcnmashleu95"},"content":"                return new DeleteCommand(option);","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":91,"author":{"gitId":"zcnmashleu95"},"content":"            case \"reschedule\":","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"zcnmashleu95"},"content":"                index \u003d input.indexOf(\"/new\");","lastModifiedDate":"2021-09-19"},{"lineNumber":93,"author":{"gitId":"zcnmashleu95"},"content":"                secPart \u003d input.substring(index);","lastModifiedDate":"2021-09-19"},{"lineNumber":94,"author":{"gitId":"zcnmashleu95"},"content":"                secPart \u003d secPart.replaceFirst(\"/new\", \"\").trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":95,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":96,"author":{"gitId":"zcnmashleu95"},"content":"                try {","lastModifiedDate":"2021-09-19"},{"lineNumber":97,"author":{"gitId":"zcnmashleu95"},"content":"                    option \u003d Integer.parseInt","lastModifiedDate":"2021-09-19"},{"lineNumber":98,"author":{"gitId":"zcnmashleu95"},"content":"                            (input.substring(0, index).replaceFirst(\"reschedule\", \"\").trim());","lastModifiedDate":"2021-09-19"},{"lineNumber":99,"author":{"gitId":"zcnmashleu95"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":100,"author":{"gitId":"zcnmashleu95"},"content":"                    throw new DukeException(\"Error: Invalid option number, your input is not a number\");","lastModifiedDate":"2021-09-19"},{"lineNumber":101,"author":{"gitId":"zcnmashleu95"},"content":"                }","lastModifiedDate":"2021-09-19"},{"lineNumber":102,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":103,"author":{"gitId":"zcnmashleu95"},"content":"                return new RescheduleCommand(option, secPart);","lastModifiedDate":"2021-09-19"},{"lineNumber":104,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":105,"author":{"gitId":"zcnmashleu95"},"content":"            case \"todo\":","lastModifiedDate":"2021-09-19"},{"lineNumber":106,"author":{"gitId":"zcnmashleu95"},"content":"                description \u003d input.replaceFirst(\"todo\", \"\").trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":107,"author":{"gitId":"zcnmashleu95"},"content":"                return new AddCommand(\"todo\", description, secPart);","lastModifiedDate":"2021-09-19"},{"lineNumber":108,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":109,"author":{"gitId":"zcnmashleu95"},"content":"            case \"event\":","lastModifiedDate":"2021-09-19"},{"lineNumber":110,"author":{"gitId":"zcnmashleu95"},"content":"            case \"deadline\":","lastModifiedDate":"2021-09-19"},{"lineNumber":111,"author":{"gitId":"zcnmashleu95"},"content":"                return parseAddCommandSpecialTask(commandWord, input);","lastModifiedDate":"2021-09-19"},{"lineNumber":112,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":113,"author":{"gitId":"zcnmashleu95"},"content":"            default:","lastModifiedDate":"2021-09-19"},{"lineNumber":114,"author":{"gitId":"zcnmashleu95"},"content":"                description \u003d input;","lastModifiedDate":"2021-09-19"},{"lineNumber":115,"author":{"gitId":"zcnmashleu95"},"content":"                return new AddCommand(\"task\", description, secPart);","lastModifiedDate":"2021-09-19"},{"lineNumber":116,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":117,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":118,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":119,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":120,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":121,"author":{"gitId":"zcnmashleu95"},"content":"    public static Command parseAddCommandSpecialTask(String taskType, String input) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":122,"author":{"gitId":"zcnmashleu95"},"content":"        int index \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"zcnmashleu95"},"content":"        String description \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":124,"author":{"gitId":"zcnmashleu95"},"content":"        String secPart \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":125,"author":{"gitId":"zcnmashleu95"},"content":"        String separator \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":126,"author":{"gitId":"zcnmashleu95"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-19"},{"lineNumber":127,"author":{"gitId":"zcnmashleu95"},"content":"            case \"event\":","lastModifiedDate":"2021-09-19"},{"lineNumber":128,"author":{"gitId":"zcnmashleu95"},"content":"                separator \u003d \"/at\";","lastModifiedDate":"2021-09-19"},{"lineNumber":129,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-19"},{"lineNumber":130,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":131,"author":{"gitId":"zcnmashleu95"},"content":"            case \"deadline\":","lastModifiedDate":"2021-09-19"},{"lineNumber":132,"author":{"gitId":"zcnmashleu95"},"content":"                separator \u003d \"/by\";","lastModifiedDate":"2021-09-19"},{"lineNumber":133,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-19"},{"lineNumber":134,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":135,"author":{"gitId":"zcnmashleu95"},"content":"            default:","lastModifiedDate":"2021-09-19"},{"lineNumber":136,"author":{"gitId":"zcnmashleu95"},"content":"                throw new DukeException(\"Error: Incomplete Command for Add Task.\");","lastModifiedDate":"2021-09-19"},{"lineNumber":137,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":138,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":139,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":140,"author":{"gitId":"zcnmashleu95"},"content":"            index \u003d input.indexOf(separator);","lastModifiedDate":"2021-09-19"},{"lineNumber":141,"author":{"gitId":"zcnmashleu95"},"content":"            secPart \u003d input.substring(index);","lastModifiedDate":"2021-09-19"},{"lineNumber":142,"author":{"gitId":"zcnmashleu95"},"content":"            secPart \u003d secPart.replaceFirst(separator, \"\").trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":143,"author":{"gitId":"zcnmashleu95"},"content":"            description \u003d input.substring(0, index);","lastModifiedDate":"2021-09-19"},{"lineNumber":144,"author":{"gitId":"zcnmashleu95"},"content":"            description \u003d description.replaceFirst(taskType, \"\").trim();","lastModifiedDate":"2021-09-19"},{"lineNumber":145,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":146,"author":{"gitId":"zcnmashleu95"},"content":"            switch (taskType) {","lastModifiedDate":"2021-09-19"},{"lineNumber":147,"author":{"gitId":"zcnmashleu95"},"content":"                case \"event\":","lastModifiedDate":"2021-09-19"},{"lineNumber":148,"author":{"gitId":"zcnmashleu95"},"content":"                    throw new DukeException(\"Error: Incomplete Command for Add Event\");","lastModifiedDate":"2021-09-19"},{"lineNumber":149,"author":{"gitId":"zcnmashleu95"},"content":"                case \"deadline\":","lastModifiedDate":"2021-09-19"},{"lineNumber":150,"author":{"gitId":"zcnmashleu95"},"content":"                    throw new DukeException(\"Error: Incomplete Command for Add Deadline.\");","lastModifiedDate":"2021-09-19"},{"lineNumber":151,"author":{"gitId":"zcnmashleu95"},"content":"                default:","lastModifiedDate":"2021-09-19"},{"lineNumber":152,"author":{"gitId":"zcnmashleu95"},"content":"                    throw new DukeException(\"Error: Incomplete Command for Adding a special task.\");","lastModifiedDate":"2021-09-19"},{"lineNumber":153,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":154,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":155,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":156,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":157,"author":{"gitId":"zcnmashleu95"},"content":"        return new AddCommand(taskType, description, secPart);","lastModifiedDate":"2021-09-19"},{"lineNumber":158,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":159,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":160,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":161,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":162,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"},{"lineNumber":163,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":164,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":164}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package storage;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.Deadline;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.Event;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.TaskList;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"import java.io.*;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":" * This represents the Files access. The various objects are used to access the file/directory","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":" * location for either writing or reading on the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"public class Storage {","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"    private File directory;","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"    private File f;","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"    private String filePath;","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"    //For reading files","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"    private FileReader fr;","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"    private BufferedReader br;","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"    private ArrayList\u003cString[]\u003e parsedFile;","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor for the Storage Class.","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"     * @param filePath This is the filePath of the text file.","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"    public Storage(String filePath) throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"        this.directory \u003d new File(\"data\");","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"        if (this.directory.isDirectory() \u003d\u003d false || this.directory.exists() \u003d\u003d false) {","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(\"Directory \\\"data\\\" is not found, creating a new one\");","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"            this.directory.mkdir();","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"        this.f \u003d new File(filePath);","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"        if (this.f.isFile() \u003d\u003d false || this.f.exists() \u003d\u003d false) {","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(\"File \\\"duke.text\\\" is not found, creating a new one\");","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"            this.f.createNewFile();","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"     * This is a mutator. It writes the Task List details into a file.","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"     * @param tasks This is the list of tasks that the user has entered.","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"    public void save(TaskList tasks) throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"        int size \u003d tasks.getSize();","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(\"Task List is empty. Nothing to save.\");","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"            return;","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"zcnmashleu95"},"content":"        String temp \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"zcnmashleu95"},"content":"        String text \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"zcnmashleu95"},"content":"        String firstPart;","lastModifiedDate":"2021-09-19"},{"lineNumber":69,"author":{"gitId":"zcnmashleu95"},"content":"        String secPart \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":70,"author":{"gitId":"zcnmashleu95"},"content":"        int done \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":71,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"zcnmashleu95"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"zcnmashleu95"},"content":"            temp \u003d tasks.get(i).getClass().toString();","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"zcnmashleu95"},"content":"            switch (temp) {","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"zcnmashleu95"},"content":"                case \"class tasks.Task\":","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"zcnmashleu95"},"content":"                    firstPart \u003d \"O | \";","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"zcnmashleu95"},"content":"                    break;","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"zcnmashleu95"},"content":"                case \"class tasks.ToDo\":","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"zcnmashleu95"},"content":"                    firstPart \u003d \"T | \";","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"zcnmashleu95"},"content":"                    break;","lastModifiedDate":"2021-09-19"},{"lineNumber":81,"author":{"gitId":"zcnmashleu95"},"content":"                case \"class tasks.Deadline\":","lastModifiedDate":"2021-09-19"},{"lineNumber":82,"author":{"gitId":"zcnmashleu95"},"content":"                    firstPart \u003d \"D | \";","lastModifiedDate":"2021-09-19"},{"lineNumber":83,"author":{"gitId":"zcnmashleu95"},"content":"                    secPart \u003d \" | \" + ((Deadline) tasks.get(i)).getBy();","lastModifiedDate":"2021-09-19"},{"lineNumber":84,"author":{"gitId":"zcnmashleu95"},"content":"                    break;","lastModifiedDate":"2021-09-19"},{"lineNumber":85,"author":{"gitId":"zcnmashleu95"},"content":"                case \"class tasks.Event\":","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"zcnmashleu95"},"content":"                    firstPart \u003d \"E | \";","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"zcnmashleu95"},"content":"                    secPart \u003d \" | \" + ((Event) tasks.get(i)).getAt();","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"zcnmashleu95"},"content":"                    break;","lastModifiedDate":"2021-09-19"},{"lineNumber":89,"author":{"gitId":"zcnmashleu95"},"content":"                default:","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"zcnmashleu95"},"content":"                    System.out.println(\"Did not get Class from Task List:\" + tasks.get(i).toString());","lastModifiedDate":"2021-09-19"},{"lineNumber":91,"author":{"gitId":"zcnmashleu95"},"content":"                    continue;","lastModifiedDate":"2021-09-19"},{"lineNumber":92,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":93,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":94,"author":{"gitId":"zcnmashleu95"},"content":"            done \u003d (tasks.get(i).getIsDone()) ? 1 : 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":95,"author":{"gitId":"zcnmashleu95"},"content":"            text \u003d firstPart + done + \" | \" + tasks.get(i).getDescription() + secPart;","lastModifiedDate":"2021-09-19"},{"lineNumber":96,"author":{"gitId":"zcnmashleu95"},"content":"            fw.write(text + System.lineSeparator());","lastModifiedDate":"2021-09-19"},{"lineNumber":97,"author":{"gitId":"zcnmashleu95"},"content":"            text \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":98,"author":{"gitId":"zcnmashleu95"},"content":"            secPart \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":99,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":100,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":101,"author":{"gitId":"zcnmashleu95"},"content":"        fw.close();","lastModifiedDate":"2021-09-19"},{"lineNumber":102,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":103,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":104,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":105,"author":{"gitId":"zcnmashleu95"},"content":"     * This is a mutator that loads the task lists from the file.","lastModifiedDate":"2021-09-19"},{"lineNumber":106,"author":{"gitId":"zcnmashleu95"},"content":"     * It will return a list of tasks in form of an ArrayList of Strings. These Strings will be used for","lastModifiedDate":"2021-09-19"},{"lineNumber":107,"author":{"gitId":"zcnmashleu95"},"content":"     * the initialisation of TaskList","lastModifiedDate":"2021-09-19"},{"lineNumber":108,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":109,"author":{"gitId":"zcnmashleu95"},"content":"     * @return a list of tasks that are written as strings","lastModifiedDate":"2021-09-19"},{"lineNumber":110,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":111,"author":{"gitId":"zcnmashleu95"},"content":"    public ArrayList\u003cString[]\u003e load() throws IOException {","lastModifiedDate":"2021-09-19"},{"lineNumber":112,"author":{"gitId":"zcnmashleu95"},"content":"        this.f \u003d new File(this.filePath);","lastModifiedDate":"2021-09-19"},{"lineNumber":113,"author":{"gitId":"zcnmashleu95"},"content":"        this.fr \u003d new FileReader(this.f);","lastModifiedDate":"2021-09-19"},{"lineNumber":114,"author":{"gitId":"zcnmashleu95"},"content":"        this.br \u003d new BufferedReader(this.fr);","lastModifiedDate":"2021-09-19"},{"lineNumber":115,"author":{"gitId":"zcnmashleu95"},"content":"        this.parsedFile \u003d new ArrayList\u003cString[]\u003e();","lastModifiedDate":"2021-09-19"},{"lineNumber":116,"author":{"gitId":"zcnmashleu95"},"content":"        String line;","lastModifiedDate":"2021-09-19"},{"lineNumber":117,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":118,"author":{"gitId":"zcnmashleu95"},"content":"        while ((line \u003d this.br.readLine()) !\u003d null) {","lastModifiedDate":"2021-09-19"},{"lineNumber":119,"author":{"gitId":"zcnmashleu95"},"content":"            this.parsedFile.add(line.split(\" \\\\| \"));","lastModifiedDate":"2021-09-19"},{"lineNumber":120,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":121,"author":{"gitId":"zcnmashleu95"},"content":"        this.fr.close();","lastModifiedDate":"2021-09-19"},{"lineNumber":122,"author":{"gitId":"zcnmashleu95"},"content":"        return this.parsedFile;","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":124,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":125,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":125}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":" * This represents a Deadline Task. It has a LocalDateTime by object.","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":" * The \"by\" object will represent the time which the Deadline is supposed to finish.","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":" * The local date time format is in \"YYYY","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    private LocalDateTime by;","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"     * This is a constructor for the Deadline class","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"     * @param description This describe the task for the deadline","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"     * @param by          This represents the date and time of the deadline","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2021-08-26"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"        super(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"            this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"            this.by \u003d LocalDateTime.now();","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(\"Invalid Date Time set for /by. It will be set to the current \" +","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"                    \"time. Format should be \\\"dd/MM/yyyy HH:mm:ss\\\" \");","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-08-26"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"     * This is an accessor of the \"by\" object which represents the date and time of the dateline","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"     * @return the dateline of the task","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"    public String getBy() {","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm:ss\"));","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"    public void rescheduleBy(String by) {","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"            this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"dd/M/yyyy HH:mm:ss\"));","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"            this.by \u003d LocalDateTime.now();","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(\"Invalid Date Time set for /by. It will be set to the current \" +","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"                    \"time. Format should be \\\"dd/MM/yyyy HH:mm:ss\\\" \");","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"     * This converts the Deadline to a String object for printing.","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"     * @return the deadline written as a String","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"    public String toString() {","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getBy() + \")\";","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"zcnmashleu95":63}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":" * This represents the Event Class. It includes a String at.","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":" * at will represent the destination or \"time\" for the task. Anything that the user","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":" * wants to input for it.","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"public class Event extends Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"    protected LocalTime end;","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"     * This is a constructor for the Event Class.","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"     * @param description This describes the activity of the event.","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"     * @param at          This indicates the time period for the event.","lastModifiedDate":"2021-09-26"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"        super(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"        int indexOfTo \u003d at.indexOf(\"to\");","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"            this.start \u003d LocalDateTime.parse(at.substring(0, indexOfTo).trim(), DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"            this.end \u003d LocalTime.parse(at.substring(indexOfTo).replace(\"to\", \"\").trim(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"            this.start \u003d LocalDateTime.now();","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"            this.end \u003d LocalTime.now();","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(\"Invalid Date Time was set. It will be set to the current \" +","lastModifiedDate":"2021-09-26"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"                    \"time. Format should be \\\"dd/MM/yyyy HH:mm:ss to HH:mm:ss\\\" \");","lastModifiedDate":"2021-09-26"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"        } finally {","lastModifiedDate":"2021-09-26"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"            if (start.toLocalTime().compareTo(end) \u003e 0) {","lastModifiedDate":"2021-09-26"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"                System.out.println(\"Notification: For the added event, start time is after end time. The event task will still be added.\");","lastModifiedDate":"2021-09-26"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"     * This is a accessor for the object \"at\"","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"     * @return the location of the event.","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"    public String getAt() {","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"        return this.start.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm:ss\")) + \" to \"","lastModifiedDate":"2021-09-26"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"                + this.end.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"));","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"     * This converts the Event Object to a String for printing.","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"     * @return the Event written as a String","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + getAt() + \")\";","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":64,"author":{"gitId":"zcnmashleu95"},"content":"    public void rescheduleAt(String at) {","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"zcnmashleu95"},"content":"        int indexOfTo \u003d at.indexOf(\"to\");","lastModifiedDate":"2021-09-26"},{"lineNumber":66,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"zcnmashleu95"},"content":"            this.start \u003d LocalDateTime.parse(at.substring(0, indexOfTo).trim(), DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":68,"author":{"gitId":"zcnmashleu95"},"content":"            this.end \u003d LocalTime.parse(at.substring(indexOfTo).replace(\"to\", \"\").trim(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));","lastModifiedDate":"2021-09-26"},{"lineNumber":69,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":70,"author":{"gitId":"zcnmashleu95"},"content":"            this.start \u003d LocalDateTime.now();","lastModifiedDate":"2021-09-19"},{"lineNumber":71,"author":{"gitId":"zcnmashleu95"},"content":"            this.end \u003d LocalTime.now();","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(\"Invalid Date Time was set. It will be set to the current \" +","lastModifiedDate":"2021-09-26"},{"lineNumber":73,"author":{"gitId":"zcnmashleu95"},"content":"                    \"time. Format should be \\\"dd/MM/yyyy HH:mm:ss to HH:mm:ss\\\" \");","lastModifiedDate":"2021-09-26"},{"lineNumber":74,"author":{"gitId":"zcnmashleu95"},"content":"        } finally {","lastModifiedDate":"2021-09-26"},{"lineNumber":75,"author":{"gitId":"zcnmashleu95"},"content":"            if (start.toLocalTime().compareTo(end) \u003e 0) {","lastModifiedDate":"2021-09-26"},{"lineNumber":76,"author":{"gitId":"zcnmashleu95"},"content":"                System.out.println(\"Notification: For the added event, start time is after end time. The event task will still be added.\");","lastModifiedDate":"2021-09-26"},{"lineNumber":77,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-09-26"},{"lineNumber":78,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"zcnmashleu95":80}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package tasks;","lastModifiedDate":"2021-08-25"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":" * Represents the Parent Class Task. It has a String for the description of the task.","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":" * The boolean is meant to indicate if the task is done.","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":" * The cumulatedTasksAdded is meant to count total number of tasks added throughout the session","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"public class Task {","lastModifiedDate":"2021-08-25"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"    private String description;","lastModifiedDate":"2021-08-25"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"    private boolean isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"    protected static int cumulatedTasksAdded \u003d 0;","lastModifiedDate":"2021-08-25"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"     * This is a constructor for a Task","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"     * @param description This describes the activity of the task.","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-25"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-25"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-25"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"        cumulatedTasksAdded++;","lastModifiedDate":"2021-08-25"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"     * This changes the isDone boolean to the parameter \"value\". Which is either true or false.","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"     * If true, it means the task is completed.","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"     * @param isDone This is the boolean value which indicates if the task is completed or not","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"    public void changeDoneTo(boolean isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-08-25"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"     * This is an accessor of the description","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"     * @return the description of the task.","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"    public String getDescription() {","lastModifiedDate":"2021-08-25"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"        return this.description;","lastModifiedDate":"2021-08-25"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"     * This is an accessor of the isDone boolean.","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"     * @return if the task is done or not","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"        return this.isDone;","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"     * This converts the Task to a String for printing","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"     * @return the Task in the form of a String","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"    public String toString() {","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"zcnmashleu95"},"content":"        String symbol;","lastModifiedDate":"2021-08-25"},{"lineNumber":65,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":66,"author":{"gitId":"zcnmashleu95"},"content":"        if (this.isDone) {","lastModifiedDate":"2021-08-25"},{"lineNumber":67,"author":{"gitId":"zcnmashleu95"},"content":"            symbol \u003d \"+\";","lastModifiedDate":"2021-08-25"},{"lineNumber":68,"author":{"gitId":"zcnmashleu95"},"content":"        } else {","lastModifiedDate":"2021-08-25"},{"lineNumber":69,"author":{"gitId":"zcnmashleu95"},"content":"            symbol \u003d \"-\";","lastModifiedDate":"2021-08-25"},{"lineNumber":70,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":72,"author":{"gitId":"zcnmashleu95"},"content":"        return (\"[\" + symbol + \"] \" + getDescription());","lastModifiedDate":"2021-08-25"},{"lineNumber":73,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":74,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"zcnmashleu95"},"content":"    public int getCumulatedTasksAdded() {","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"zcnmashleu95"},"content":"        return cumulatedTasksAdded;","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-08-25"}],"authorContributionMap":{"zcnmashleu95":80}},{"path":"src/main/java/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package tasks;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":" * Represents the Task List. It contains a list of tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":" * It has operations to add, delete, find and print the tasks from the list.","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"public class TaskList {","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor of the TaskList. It initialises the ArrayList for tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"    public TaskList() {","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"     * This is another constructor of the TaskList. This constructor loads from","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"     * the storage file. It has been parsed to an ArrayList of strings for loading.","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"     * @param parsedFile This is the ArrayList of Strings","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"     * @throws DukeException This is thrown when the parsedFile does not follow the expected format","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"     *                       for the class Type section.","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"    public TaskList(ArrayList\u003cString[]\u003e parsedFile) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"        int size \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"            size \u003d parsedFile.size();","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(\"Error: Null pointer from parsedFile in TaskList initialisation\");","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"            switch (parsedFile.get(i)[0]) {","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"                case \"O\":","lastModifiedDate":"2021-09-21"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"                    this.tasks.add(new Task(parsedFile.get(i)[2]));","lastModifiedDate":"2021-09-21"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"                    break;","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"                case \"T\":","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"                    this.tasks.add(new ToDo(parsedFile.get(i)[2]));","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"                    break;","lastModifiedDate":"2021-09-21"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"                case \"D\":","lastModifiedDate":"2021-09-21"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"                    try {","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"                        this.tasks.add(new Deadline(parsedFile.get(i)[2],","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"                                (LocalDateTime.parse(parsedFile.get(i)[3], DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm:ss\"))","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"                                        .format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\")))));","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"zcnmashleu95"},"content":"                        System.out.println(\"Timing for added deadline invalid,\" + \" using the time now\");","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"zcnmashleu95"},"content":"                        this.tasks.add(new Deadline(parsedFile.get(i)[2],","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"zcnmashleu95"},"content":"                                LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"))));","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"zcnmashleu95"},"content":"                    }","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"zcnmashleu95"},"content":"                    break;","lastModifiedDate":"2021-09-21"},{"lineNumber":69,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":70,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":71,"author":{"gitId":"zcnmashleu95"},"content":"                case \"E\":","lastModifiedDate":"2021-09-21"},{"lineNumber":72,"author":{"gitId":"zcnmashleu95"},"content":"                    try {","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"zcnmashleu95"},"content":"                        int indexOfDash \u003d 20;","lastModifiedDate":"2021-09-25"},{"lineNumber":74,"author":{"gitId":"zcnmashleu95"},"content":"                        String start;","lastModifiedDate":"2021-09-25"},{"lineNumber":75,"author":{"gitId":"zcnmashleu95"},"content":"                        String end;","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"zcnmashleu95"},"content":"                        end \u003d parsedFile.get(i)[3].substring(indexOfDash);","lastModifiedDate":"2021-09-25"},{"lineNumber":77,"author":{"gitId":"zcnmashleu95"},"content":"                        start \u003d parsedFile.get(i)[3].substring(0, indexOfDash);","lastModifiedDate":"2021-09-25"},{"lineNumber":78,"author":{"gitId":"zcnmashleu95"},"content":"                        start \u003d (LocalDateTime.parse(start, DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm:ss\")).format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\")));","lastModifiedDate":"2021-09-25"},{"lineNumber":79,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"zcnmashleu95"},"content":"                        this.tasks.add(new Event(parsedFile.get(i)[2], \"/at \" + start + end));","lastModifiedDate":"2021-09-25"},{"lineNumber":81,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":82,"author":{"gitId":"zcnmashleu95"},"content":"                    } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-19"},{"lineNumber":83,"author":{"gitId":"zcnmashleu95"},"content":"                        System.out.println(\"Timing for added event invalid,\" + \" using the time now\");","lastModifiedDate":"2021-09-19"},{"lineNumber":84,"author":{"gitId":"zcnmashleu95"},"content":"                        this.tasks.add(new Event(parsedFile.get(i)[2],","lastModifiedDate":"2021-09-19"},{"lineNumber":85,"author":{"gitId":"zcnmashleu95"},"content":"                                LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")) + \" - \" +","lastModifiedDate":"2021-09-19"},{"lineNumber":86,"author":{"gitId":"zcnmashleu95"},"content":"                                        LocalTime.now().format(DateTimeFormatter.ofPattern(\"HH:mm\"))));","lastModifiedDate":"2021-09-19"},{"lineNumber":87,"author":{"gitId":"zcnmashleu95"},"content":"                    }","lastModifiedDate":"2021-09-19"},{"lineNumber":88,"author":{"gitId":"zcnmashleu95"},"content":"                    break;","lastModifiedDate":"2021-09-21"},{"lineNumber":89,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":90,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":91,"author":{"gitId":"zcnmashleu95"},"content":"                default:","lastModifiedDate":"2021-09-21"},{"lineNumber":92,"author":{"gitId":"zcnmashleu95"},"content":"                    throw new DukeException(\"Error: File did not show task format.\");","lastModifiedDate":"2021-09-21"},{"lineNumber":93,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":94,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":95,"author":{"gitId":"zcnmashleu95"},"content":"            if (parsedFile.get(i)[1].equals(\"1\")) {","lastModifiedDate":"2021-09-19"},{"lineNumber":96,"author":{"gitId":"zcnmashleu95"},"content":"                this.tasks.get(this.tasks.size() - 1).changeDoneTo(true);","lastModifiedDate":"2021-09-19"},{"lineNumber":97,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":98,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":99,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":100,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":101,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":102,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":103,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":104,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":105,"author":{"gitId":"zcnmashleu95"},"content":"     * This is used to get the size of the Task List.","lastModifiedDate":"2021-09-19"},{"lineNumber":106,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":107,"author":{"gitId":"zcnmashleu95"},"content":"     * @return size of Task List","lastModifiedDate":"2021-09-19"},{"lineNumber":108,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":109,"author":{"gitId":"zcnmashleu95"},"content":"    public int getSize() {","lastModifiedDate":"2021-09-19"},{"lineNumber":110,"author":{"gitId":"zcnmashleu95"},"content":"        return this.tasks.size();","lastModifiedDate":"2021-09-19"},{"lineNumber":111,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":112,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":113,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":114,"author":{"gitId":"zcnmashleu95"},"content":"     * This method returns the Task Object at the TaskList index","lastModifiedDate":"2021-09-19"},{"lineNumber":115,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":116,"author":{"gitId":"zcnmashleu95"},"content":"     * @param index Starts from 0 till (size - 1).  Meant to indicate the Task\u0027s index to return","lastModifiedDate":"2021-09-19"},{"lineNumber":117,"author":{"gitId":"zcnmashleu95"},"content":"     * @return Task at the specific index of the ArrayList","lastModifiedDate":"2021-09-19"},{"lineNumber":118,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":119,"author":{"gitId":"zcnmashleu95"},"content":"    //Maybe throw exception","lastModifiedDate":"2021-09-19"},{"lineNumber":120,"author":{"gitId":"zcnmashleu95"},"content":"    public Task get(int index) {","lastModifiedDate":"2021-09-19"},{"lineNumber":121,"author":{"gitId":"zcnmashleu95"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2021-09-19"},{"lineNumber":122,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":123,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":124,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":125,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":126,"author":{"gitId":"zcnmashleu95"},"content":"     * Delete the Task from Task List at the specific index.","lastModifiedDate":"2021-09-19"},{"lineNumber":127,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":128,"author":{"gitId":"zcnmashleu95"},"content":"     * @param index tarts from 0 till (size - 1).  Meant to indicate the Task\u0027s index to delete.","lastModifiedDate":"2021-09-19"},{"lineNumber":129,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":130,"author":{"gitId":"zcnmashleu95"},"content":"    public void deleteTask(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2021-09-19"},{"lineNumber":131,"author":{"gitId":"zcnmashleu95"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-09-19"},{"lineNumber":132,"author":{"gitId":"zcnmashleu95"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-09-19"},{"lineNumber":133,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":134,"author":{"gitId":"zcnmashleu95"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2021-09-19"},{"lineNumber":135,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":136,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":137,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":138,"author":{"gitId":"zcnmashleu95"},"content":"     * This is to add a Task to the Task List. The type of task will depend on the taskType parameter","lastModifiedDate":"2021-09-19"},{"lineNumber":139,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":140,"author":{"gitId":"zcnmashleu95"},"content":"     * @param taskType    This is meant for the different task subclasses","lastModifiedDate":"2021-09-19"},{"lineNumber":141,"author":{"gitId":"zcnmashleu95"},"content":"     * @param description This is meant for the description/activity of the task","lastModifiedDate":"2021-09-19"},{"lineNumber":142,"author":{"gitId":"zcnmashleu95"},"content":"     * @param secondPart  This is meant for Deadlines and Events tasks.","lastModifiedDate":"2021-09-19"},{"lineNumber":143,"author":{"gitId":"zcnmashleu95"},"content":"     * @throws DukeException This happens when the taskType is not one of the subclasses.","lastModifiedDate":"2021-09-19"},{"lineNumber":144,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":145,"author":{"gitId":"zcnmashleu95"},"content":"    public void addTask(String taskType, String description, String secondPart) throws DukeException {","lastModifiedDate":"2021-09-19"},{"lineNumber":146,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":147,"author":{"gitId":"zcnmashleu95"},"content":"        switch (taskType) {","lastModifiedDate":"2021-09-19"},{"lineNumber":148,"author":{"gitId":"zcnmashleu95"},"content":"            case \"task\":","lastModifiedDate":"2021-09-21"},{"lineNumber":149,"author":{"gitId":"zcnmashleu95"},"content":"                this.tasks.add(new Task(description));","lastModifiedDate":"2021-09-21"},{"lineNumber":150,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":151,"author":{"gitId":"zcnmashleu95"},"content":"            case \"todo\":","lastModifiedDate":"2021-09-21"},{"lineNumber":152,"author":{"gitId":"zcnmashleu95"},"content":"                this.tasks.add(new ToDo(description));","lastModifiedDate":"2021-09-21"},{"lineNumber":153,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":154,"author":{"gitId":"zcnmashleu95"},"content":"            case \"event\":","lastModifiedDate":"2021-09-21"},{"lineNumber":155,"author":{"gitId":"zcnmashleu95"},"content":"                this.tasks.add(new Event(description, secondPart));","lastModifiedDate":"2021-09-21"},{"lineNumber":156,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":157,"author":{"gitId":"zcnmashleu95"},"content":"            case \"deadline\":","lastModifiedDate":"2021-09-21"},{"lineNumber":158,"author":{"gitId":"zcnmashleu95"},"content":"                this.tasks.add(new Deadline(description, secondPart));","lastModifiedDate":"2021-09-21"},{"lineNumber":159,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":160,"author":{"gitId":"zcnmashleu95"},"content":"            default:","lastModifiedDate":"2021-09-21"},{"lineNumber":161,"author":{"gitId":"zcnmashleu95"},"content":"                throw new DukeException(\"Error: Incorrect Task Type in addTask Method\");","lastModifiedDate":"2021-09-21"},{"lineNumber":162,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":163,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":164,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":165,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":166,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":167,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":168,"author":{"gitId":"zcnmashleu95"},"content":"     * This is to find Tasks that contain the keyword from the Task List","lastModifiedDate":"2021-09-19"},{"lineNumber":169,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":170,"author":{"gitId":"zcnmashleu95"},"content":"     * @param keyword This is the keyword which the Task List will search for containing the keyword","lastModifiedDate":"2021-09-19"},{"lineNumber":171,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":172,"author":{"gitId":"zcnmashleu95"},"content":"    public void findList(String keyword) {","lastModifiedDate":"2021-09-19"},{"lineNumber":173,"author":{"gitId":"zcnmashleu95"},"content":"        int size \u003d this.tasks.size();","lastModifiedDate":"2021-09-19"},{"lineNumber":174,"author":{"gitId":"zcnmashleu95"},"content":"        int total \u003d 0;","lastModifiedDate":"2021-09-19"},{"lineNumber":175,"author":{"gitId":"zcnmashleu95"},"content":"        String classType \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":176,"author":{"gitId":"zcnmashleu95"},"content":"        switch (keyword) {","lastModifiedDate":"2021-09-21"},{"lineNumber":177,"author":{"gitId":"zcnmashleu95"},"content":"            case \"Task\":","lastModifiedDate":"2021-09-21"},{"lineNumber":178,"author":{"gitId":"zcnmashleu95"},"content":"                classType \u003d Task.class.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":179,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":180,"author":{"gitId":"zcnmashleu95"},"content":"            case \"ToDo\":","lastModifiedDate":"2021-09-21"},{"lineNumber":181,"author":{"gitId":"zcnmashleu95"},"content":"                classType \u003d ToDo.class.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":182,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":183,"author":{"gitId":"zcnmashleu95"},"content":"            case \"Deadline\":","lastModifiedDate":"2021-09-21"},{"lineNumber":184,"author":{"gitId":"zcnmashleu95"},"content":"                classType \u003d Deadline.class.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":185,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":186,"author":{"gitId":"zcnmashleu95"},"content":"            case \"Event\":","lastModifiedDate":"2021-09-21"},{"lineNumber":187,"author":{"gitId":"zcnmashleu95"},"content":"                classType \u003d Event.class.toString();","lastModifiedDate":"2021-09-21"},{"lineNumber":188,"author":{"gitId":"zcnmashleu95"},"content":"                break;","lastModifiedDate":"2021-09-21"},{"lineNumber":189,"author":{"gitId":"zcnmashleu95"},"content":"            default:","lastModifiedDate":"2021-09-21"},{"lineNumber":190,"author":{"gitId":"zcnmashleu95"},"content":"                classType \u003d \"\";","lastModifiedDate":"2021-09-21"},{"lineNumber":191,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-26"},{"lineNumber":192,"author":{"gitId":"zcnmashleu95"},"content":"        ;","lastModifiedDate":"2021-09-26"},{"lineNumber":193,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":194,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(System.lineSeparator() + \"Tasks that contain the keyword \\\"\" + keyword + \"\\\":\");","lastModifiedDate":"2021-09-19"},{"lineNumber":195,"author":{"gitId":"zcnmashleu95"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-19"},{"lineNumber":196,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":197,"author":{"gitId":"zcnmashleu95"},"content":"            if (this.tasks.get(i).toString().contains(keyword) || classType.equals(this.tasks.get(i).getClass().toString())) {","lastModifiedDate":"2021-09-19"},{"lineNumber":198,"author":{"gitId":"zcnmashleu95"},"content":"                total \u003d total + 1;","lastModifiedDate":"2021-09-19"},{"lineNumber":199,"author":{"gitId":"zcnmashleu95"},"content":"                System.out.println(System.lineSeparator() + (total) + \".\" + this.tasks.get(i).toString());","lastModifiedDate":"2021-09-19"},{"lineNumber":200,"author":{"gitId":"zcnmashleu95"},"content":"            }","lastModifiedDate":"2021-09-19"},{"lineNumber":201,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":202,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":203,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":204,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":205,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":206,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":207,"author":{"gitId":"zcnmashleu95"},"content":"     * This prints the Tasks in the Task List","lastModifiedDate":"2021-09-19"},{"lineNumber":208,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":209,"author":{"gitId":"zcnmashleu95"},"content":"    public void printList() {","lastModifiedDate":"2021-09-19"},{"lineNumber":210,"author":{"gitId":"zcnmashleu95"},"content":"        int size \u003d this.tasks.size();","lastModifiedDate":"2021-09-19"},{"lineNumber":211,"author":{"gitId":"zcnmashleu95"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2021-09-19"},{"lineNumber":212,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(System.lineSeparator() + \"Task List is empty.\");","lastModifiedDate":"2021-09-19"},{"lineNumber":213,"author":{"gitId":"zcnmashleu95"},"content":"            return;","lastModifiedDate":"2021-09-19"},{"lineNumber":214,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":215,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":216,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(System.lineSeparator() + \"Task List:\");","lastModifiedDate":"2021-09-19"},{"lineNumber":217,"author":{"gitId":"zcnmashleu95"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2021-09-19"},{"lineNumber":218,"author":{"gitId":"zcnmashleu95"},"content":"            System.out.println(System.lineSeparator() + (i + 1) + \".\" + this.tasks.get(i).toString());","lastModifiedDate":"2021-09-19"},{"lineNumber":219,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":220,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":221,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":222,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":223,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":224,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":225,"author":{"gitId":"zcnmashleu95"},"content":"     * This prints the total number of tasks in the task list","lastModifiedDate":"2021-09-19"},{"lineNumber":226,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":227,"author":{"gitId":"zcnmashleu95"},"content":"    public void printNumberOfTasks() {","lastModifiedDate":"2021-09-19"},{"lineNumber":228,"author":{"gitId":"zcnmashleu95"},"content":"        int total \u003d tasks.size();","lastModifiedDate":"2021-09-19"},{"lineNumber":229,"author":{"gitId":"zcnmashleu95"},"content":"        String ending;","lastModifiedDate":"2021-09-19"},{"lineNumber":230,"author":{"gitId":"zcnmashleu95"},"content":"        if (total !\u003d 1) {","lastModifiedDate":"2021-09-19"},{"lineNumber":231,"author":{"gitId":"zcnmashleu95"},"content":"            ending \u003d \" tasks in the list.\";","lastModifiedDate":"2021-09-19"},{"lineNumber":232,"author":{"gitId":"zcnmashleu95"},"content":"        } else {","lastModifiedDate":"2021-09-19"},{"lineNumber":233,"author":{"gitId":"zcnmashleu95"},"content":"            ending \u003d \" task in the list\";","lastModifiedDate":"2021-09-19"},{"lineNumber":234,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-19"},{"lineNumber":235,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":236,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Now you have \" + total + ending);","lastModifiedDate":"2021-09-19"},{"lineNumber":237,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":238,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":239,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":240,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":241,"author":{"gitId":"zcnmashleu95"},"content":"     * This clears all the tasks in the list.","lastModifiedDate":"2021-09-19"},{"lineNumber":242,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":243,"author":{"gitId":"zcnmashleu95"},"content":"    public void clearAllTasks() {","lastModifiedDate":"2021-09-19"},{"lineNumber":244,"author":{"gitId":"zcnmashleu95"},"content":"        this.tasks.clear();","lastModifiedDate":"2021-09-19"},{"lineNumber":245,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":246,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":247,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":247}},{"path":"src/main/java/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package tasks;","lastModifiedDate":"2021-08-26"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":" * Represents the \"ToDo\" task.","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-08-26"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-08-26"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor for ToDo","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"     * @param description This is the description/activity of the ToDo itself.","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-08-26"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"        super(description);","lastModifiedDate":"2021-08-26"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"     * This converts the ToDo to a String that will be used for printing","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"     * @return String This returns the ToDo in the form of a string.","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"    public String toString() {","lastModifiedDate":"2021-08-26"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-26"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-08-26"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-08-26"}],"authorContributionMap":{"zcnmashleu95":27}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package ui;","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"/**","lastModifiedDate":"2021-09-19"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":" * Represents the Ui. It is meant to scan for new input and","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":" * print the various Strings.","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":" */","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"public class Ui {","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"    public String input;","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"    Scanner scan;","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"     * This is the constructor for Ui. It initialises the scan and input objects.","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"    public Ui() {","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"        this.input \u003d \"\";","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"        scan \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"     * This prints the intro logo of Duke.","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"    public void printIntro() {","lastModifiedDate":"2021-09-19"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"        String intro \u003d \"Hello from\\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"                + \" ____        _        \\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-09-19"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-09-19"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(intro);","lastModifiedDate":"2021-09-19"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"     * This prints the dashed line used to separate printed lines/sections.","lastModifiedDate":"2021-09-19"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"    public void showLine() {","lastModifiedDate":"2021-09-19"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"___________________________________________________\");","lastModifiedDate":"2021-09-19"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"     * This prints the farewell message when the user types \"bye\".","lastModifiedDate":"2021-09-19"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"    public void printBye() {","lastModifiedDate":"2021-09-19"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(System.lineSeparator() + \"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-09-19"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"     * This prints the request message for input from user and scans for the input.","lastModifiedDate":"2021-09-19"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"     * @return the input scanned from user","lastModifiedDate":"2021-09-19"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"    public String scanForInput() {","lastModifiedDate":"2021-09-19"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(System.lineSeparator() + \"What can I do for you? For help, type \\\"/help\\\". \");","lastModifiedDate":"2021-09-19"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"        return this.scan.nextLine();","lastModifiedDate":"2021-09-19"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"     * Print the error passage that is in parameters.","lastModifiedDate":"2021-09-19"},{"lineNumber":64,"author":{"gitId":"zcnmashleu95"},"content":"     *","lastModifiedDate":"2021-09-19"},{"lineNumber":65,"author":{"gitId":"zcnmashleu95"},"content":"     * @param errorMessage This is the error message that is received.","lastModifiedDate":"2021-09-19"},{"lineNumber":66,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":67,"author":{"gitId":"zcnmashleu95"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2021-09-19"},{"lineNumber":68,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2021-09-19"},{"lineNumber":69,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":70,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":71,"author":{"gitId":"zcnmashleu95"},"content":"    /**","lastModifiedDate":"2021-09-19"},{"lineNumber":72,"author":{"gitId":"zcnmashleu95"},"content":"     * This prints the specific loading error when the Task List","lastModifiedDate":"2021-09-19"},{"lineNumber":73,"author":{"gitId":"zcnmashleu95"},"content":"     * did not load from storage.","lastModifiedDate":"2021-09-19"},{"lineNumber":74,"author":{"gitId":"zcnmashleu95"},"content":"     */","lastModifiedDate":"2021-09-19"},{"lineNumber":75,"author":{"gitId":"zcnmashleu95"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-09-19"},{"lineNumber":76,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(\"Did not load Task List from Filepath\");","lastModifiedDate":"2021-09-19"},{"lineNumber":77,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":78,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":79,"author":{"gitId":"zcnmashleu95"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2021-09-19"},{"lineNumber":80,"author":{"gitId":"zcnmashleu95"},"content":"        System.out.println(message);","lastModifiedDate":"2021-09-19"},{"lineNumber":81,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-19"},{"lineNumber":82,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":83,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":83}},{"path":"test/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package parser;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import commands.AddCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import commands.ListCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import commands.DeleteCommand;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"import tasks.*;","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"import ui.Ui;","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"import storage.Storage;","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"class ParserTest {","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"    private Parser parser \u003d new Parser();","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"    void testParseListCommand() throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"class commands.ListCommand\", parser.parse(\"list 123\").getClass().toString());","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"task\", ((AddCommand) parser.parse(\"list123\")).getTaskType());","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"list123\", ((AddCommand) parser.parse(\"list123\")).getTaskDescription());","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"task\", ((AddCommand) parser.parse(\"List\")).getTaskType());","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"List\", ((AddCommand) parser.parse(\"List\")).getTaskDescription());","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"zcnmashleu95"},"content":"    void testParseBlah() {","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"zcnmashleu95"},"content":"            parser.parse(\"blah\");","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"zcnmashleu95"},"content":"            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getErrorMessage());","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"zcnmashleu95"},"content":"            assertEquals(\"task\", ((AddCommand) parser.parse(\"blah 123\")).getTaskType());","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"zcnmashleu95"},"content":"            assertEquals(\"blah 123\", ((AddCommand) parser.parse(\"blah 123\")).getTaskDescription());","lastModifiedDate":"2021-09-20"},{"lineNumber":48,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":49,"author":{"gitId":"zcnmashleu95"},"content":"            e.getErrorMessage();","lastModifiedDate":"2021-09-20"},{"lineNumber":50,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":51,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":52,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":53,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":54,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":55,"author":{"gitId":"zcnmashleu95"},"content":"    void testParseEmptyString() {","lastModifiedDate":"2021-09-20"},{"lineNumber":56,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":57,"author":{"gitId":"zcnmashleu95"},"content":"            parser.parse(\"\");","lastModifiedDate":"2021-09-20"},{"lineNumber":58,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":59,"author":{"gitId":"zcnmashleu95"},"content":"            assertEquals(\"☹ OOPS!!! You did not enter any command\", e.getErrorMessage());","lastModifiedDate":"2021-09-20"},{"lineNumber":60,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":61,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":62,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":63,"author":{"gitId":"zcnmashleu95"},"content":"            parser.parse(\"    \");","lastModifiedDate":"2021-09-20"},{"lineNumber":64,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":65,"author":{"gitId":"zcnmashleu95"},"content":"            assertEquals(\"☹ OOPS!!! You did not enter any command\", e.getErrorMessage());","lastModifiedDate":"2021-09-20"},{"lineNumber":66,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":67,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":71,"author":{"gitId":"zcnmashleu95"},"content":"    void testParseDelete() throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":72,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"class commands.DeleteCommand\", parser.parse(\"delete 2\").getClass().toString());","lastModifiedDate":"2021-09-20"},{"lineNumber":73,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":74,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"class commands.AddCommand\", parser.parse(\"delete2\").getClass().toString());","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":76,"author":{"gitId":"zcnmashleu95"},"content":"        try {","lastModifiedDate":"2021-09-20"},{"lineNumber":77,"author":{"gitId":"zcnmashleu95"},"content":"            parser.parse(\"delete -1\");","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"zcnmashleu95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"zcnmashleu95"},"content":"            assertEquals(\"Input option for Delete invalid.\", e.getErrorMessage());","lastModifiedDate":"2021-09-20"},{"lineNumber":80,"author":{"gitId":"zcnmashleu95"},"content":"        }","lastModifiedDate":"2021-09-20"},{"lineNumber":81,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":82,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":85,"author":{"gitId":"zcnmashleu95"},"content":"    void testParseAddTask() throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":86,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"task\", ((AddCommand) parser.parse(\"jumping\")).getTaskType());","lastModifiedDate":"2021-09-20"},{"lineNumber":87,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"jumping\", ((AddCommand) parser.parse(\"jumping\")).getTaskDescription());","lastModifiedDate":"2021-09-20"},{"lineNumber":88,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":89,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":90,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":91,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":92,"author":{"gitId":"zcnmashleu95"},"content":"    void testParseAddTodo() throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":93,"author":{"gitId":"zcnmashleu95"},"content":"        AddCommand dummyAdd \u003d (AddCommand) parser.parse(\"todo running\");","lastModifiedDate":"2021-09-20"},{"lineNumber":94,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"todo\", dummyAdd.getTaskType());","lastModifiedDate":"2021-09-20"},{"lineNumber":95,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"running\", dummyAdd.getTaskDescription());","lastModifiedDate":"2021-09-20"},{"lineNumber":96,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":97,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":98,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":99,"author":{"gitId":"zcnmashleu95"},"content":"    void testParseAddDeadline() throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":100,"author":{"gitId":"zcnmashleu95"},"content":"        AddCommand dummyAdd \u003d (AddCommand) parser.parse(\"deadline jogging /by 02/01/2020 23:59:59\");","lastModifiedDate":"2021-09-20"},{"lineNumber":101,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"deadline\", dummyAdd.getTaskType());","lastModifiedDate":"2021-09-20"},{"lineNumber":102,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"jogging\", dummyAdd.getTaskDescription());","lastModifiedDate":"2021-09-20"},{"lineNumber":103,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"02/01/2020 23:59:59\", dummyAdd.getTaskSecondPart());","lastModifiedDate":"2021-09-20"},{"lineNumber":104,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":105,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":106,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":107,"author":{"gitId":"zcnmashleu95"},"content":"    void testParseAddEvent() throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":108,"author":{"gitId":"zcnmashleu95"},"content":"        AddCommand dummyAdd \u003d (AddCommand) parser.parse(\"event dinner /at 20/02/2000 10:10:10 - 23:12:30\");","lastModifiedDate":"2021-09-25"},{"lineNumber":109,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"event\", dummyAdd.getTaskType());","lastModifiedDate":"2021-09-20"},{"lineNumber":110,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"dinner\", dummyAdd.getTaskDescription());","lastModifiedDate":"2021-09-20"},{"lineNumber":111,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"20/02/2000 10:10:10 - 23:12:30\", dummyAdd.getTaskSecondPart());","lastModifiedDate":"2021-09-25"},{"lineNumber":112,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":113,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":114,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"zcnmashleu95":114}},{"path":"test/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package tasks;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"class DeadlineTest {","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"    void testGetBy_success() {","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"20 Feb 2000 10:10:10\", new Deadline(\"running\", \"20/02/2000 10:10:10\").getBy());","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"    void testToString_success() {","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"[D][-] running (by: 20 Feb 2000 10:10:10)\", new Deadline(\"running\", \"20/02/2000 10:10:10\").toString());","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"zcnmashleu95":17}},{"path":"test/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package tasks;","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"class EventTest {","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"    void testGetAt_success() {","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"20 Feb 2000 10:10:10 to 23:12:30\", new Event(\"running\", \"20/02/2000 10:10:10 to 23:12:30\").getAt());","lastModifiedDate":"2021-09-26"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-26"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"    void testToString_success() {","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(\"[E][-] birthday dinner (at: 20 Feb 2000 11:11:11 to 20:20:20)\", new Event(\"birthday dinner\", \"20/02/2000 11:11:11 to 20:20:20\").toString());","lastModifiedDate":"2021-09-26"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"zcnmashleu95":17}},{"path":"test/tasks/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"package tasks;","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"import exceptions.DukeException;","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"class TaskListTest {","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"    @Test","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"    void getSize_success() throws DukeException {","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.addTask(\"todo\", \"running\", \"\");","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.addTask(\"task\", \"jumping\", \"\");","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.addTask(\"event\", \"hopping\", \"home\");","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"        tasks.addTask(\"deadline\", \"walking\", \"02/02/2020 10:10:10\");","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"        assertEquals(4, tasks.getSize());","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"    }","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"}","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"zcnmashleu95":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zcnmashleu95"},"content":"/help","lastModifiedDate":"2021-09-19"},{"lineNumber":2,"author":{"gitId":"zcnmashleu95"},"content":"/clear","lastModifiedDate":"2021-09-19"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"jumping jacks","lastModifiedDate":"2021-09-19"},{"lineNumber":4,"author":{"gitId":"zcnmashleu95"},"content":"todo house chores","lastModifiedDate":"2021-09-19"},{"lineNumber":5,"author":{"gitId":"zcnmashleu95"},"content":"deadline school homework /by 20/12/2020 10:10:10","lastModifiedDate":"2021-09-19"},{"lineNumber":6,"author":{"gitId":"zcnmashleu95"},"content":"event birthday dinner /at 10/12/2020 11:11:11 to 20:20:20","lastModifiedDate":"2021-09-27"},{"lineNumber":7,"author":{"gitId":"zcnmashleu95"},"content":"deadline essay /by 24/11/2020 23:59:59","lastModifiedDate":"2021-09-19"},{"lineNumber":8,"author":{"gitId":"zcnmashleu95"},"content":"list","lastModifiedDate":"2021-09-19"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"done 1","lastModifiedDate":"2021-09-19"},{"lineNumber":10,"author":{"gitId":"zcnmashleu95"},"content":"done 5","lastModifiedDate":"2021-09-19"},{"lineNumber":11,"author":{"gitId":"zcnmashleu95"},"content":"done 3","lastModifiedDate":"2021-09-19"},{"lineNumber":12,"author":{"gitId":"zcnmashleu95"},"content":"delete 1","lastModifiedDate":"2021-09-19"},{"lineNumber":13,"author":{"gitId":"zcnmashleu95"},"content":"undone 2","lastModifiedDate":"2021-09-19"},{"lineNumber":14,"author":{"gitId":"zcnmashleu95"},"content":"list","lastModifiedDate":"2021-09-19"},{"lineNumber":15,"author":{"gitId":"zcnmashleu95"},"content":"running","lastModifiedDate":"2021-09-19"},{"lineNumber":16,"author":{"gitId":"zcnmashleu95"},"content":"reschedule 2 /new 18/12/2020 23:59:59","lastModifiedDate":"2021-09-19"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"reschedule 3 /new 11/12/2020 18:30:00 to 22:13:14","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"zcnmashleu95"},"content":"todo Write Deadlines for myself","lastModifiedDate":"2021-09-19"},{"lineNumber":19,"author":{"gitId":"zcnmashleu95"},"content":"find home","lastModifiedDate":"2021-09-19"},{"lineNumber":20,"author":{"gitId":"zcnmashleu95"},"content":"find ho","lastModifiedDate":"2021-09-19"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"find Deadline","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"find Event","lastModifiedDate":"2021-09-19"},{"lineNumber":23,"author":{"gitId":"zcnmashleu95"},"content":"find ToDo","lastModifiedDate":"2021-09-19"},{"lineNumber":24,"author":{"gitId":"zcnmashleu95"},"content":"find Task","lastModifiedDate":"2021-09-19"},{"lineNumber":25,"author":{"gitId":"zcnmashleu95"},"content":"find essay","lastModifiedDate":"2021-09-19"},{"lineNumber":26,"author":{"gitId":"zcnmashleu95"},"content":"list","lastModifiedDate":"2021-09-19"},{"lineNumber":27,"author":{"gitId":"zcnmashleu95"},"content":"/clear","lastModifiedDate":"2021-09-26"},{"lineNumber":28,"author":{"gitId":"zcnmashleu95"},"content":"bye","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"zcnmashleu95":28}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"zcnmashleu95"},"content":"if not exist bin mkdir bin","lastModifiedDate":"2021-09-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"zcnmashleu95"},"content":"javac  --release 11 -cp ..\\src\\main\\java -Xlint:none -d bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2021-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"zcnmashleu95"},"content":"java -classpath bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"zcnmashleu95"},"content":"","lastModifiedDate":"2021-09-19"},{"lineNumber":22,"author":{"gitId":"zcnmashleu95"},"content":"pause","lastModifiedDate":"2021-09-19"}],"authorContributionMap":{"-":17,"zcnmashleu95":5}}]
